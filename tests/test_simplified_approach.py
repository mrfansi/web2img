#!/usr/bin/env python3
"""
Test to verify the simplified screenshot approach works correctly.
This tests the new simplified context-based approach without tab pool complexity.
"""

import asyncio


class MockPage:
    """Mock page object."""
    def __init__(self):
        self.closed = False
        self.url = "http://example.com"
    
    def is_closed(self):
        return self.closed
    
    async def close(self):
        self.closed = True
    
    async def set_viewport_size(self, size):
        pass
    
    async def goto(self, url, wait_until=None, timeout=None):
        """Mock navigation."""
        return MockResponse()
    
    async def screenshot(self, path=None, format=None):
        """Mock screenshot capture."""
        if path:
            # Create a mock file
            with open(path, 'w') as f:
                f.write("mock screenshot data")
        return b"mock screenshot data"


class MockResponse:
    """Mock response object."""
    def __init__(self):
        self.status = 200


class MockContext:
    """Mock browser context."""
    async def new_page(self):
        return MockPage()


class MockScreenshotService:
    """Mock screenshot service for testing."""
    
    def __init__(self):
        self.logger = MockLogger()
    
    async def _get_context(self, width, height):
        """Mock get context method."""
        return MockContext(), 1
    
    async def _return_context(self, context, browser_index, is_healthy=True):
        """Mock return context method."""
        print(f"Returning context: browser_index={browser_index}, is_healthy={is_healthy}")
    
    async def _track_resource(self, resource_type, resource):
        """Mock track resource method."""
        pass
    
    async def _untrack_resource(self, resource_type, resource):
        """Mock untrack resource method."""
        pass
    
    async def _get_navigation_strategy(self):
        """Mock navigation strategy."""
        return "domcontentloaded", 30000
    
    async def _configure_page_for_site(self, page):
        """Mock page configuration."""
        pass
    
    async def _navigate_to_url(self, page, url, wait_until, timeout):
        """Mock navigation."""
        return await page.goto(url, wait_until=wait_until, timeout=timeout)
    
    async def _capture_screenshot_with_retry(self, page, filepath, format):
        """Mock screenshot capture with retry."""
        await page.screenshot(path=filepath, format=format)
        return filepath


class MockLogger:
    """Mock logger for testing."""
    
    def debug(self, message, context=None):
        print(f"DEBUG: {message}")
    
    def info(self, message, context=None):
        print(f"INFO: {message}")
    
    def warning(self, message, context=None):
        print(f"WARNING: {message}")
    
    def error(self, message, context=None):
        print(f"ERROR: {message}")


class MockSettings:
    """Mock settings."""
    page_creation_timeout = 30000


# Import the context manager
import sys
sys.path.insert(0, 'app')

# Mock the settings
import app.core.config
app.core.config.settings = MockSettings()

from app.services.screenshot import ContextManager


async def test_simplified_screenshot_approach():
    """Test the simplified screenshot approach."""
    print("üß™ Testing Simplified Screenshot Approach")
    print("=" * 50)
    
    service = MockScreenshotService()
    
    try:
        # Test the context manager
        print("üìë Testing ContextManager...")
        async with ContextManager(service, 1280, 720) as (context, browser_index, page):
            print(f"‚úÖ Got context: {type(context).__name__}, browser_index={browser_index}, page={type(page).__name__}")
            
            # Test navigation
            print("üìë Testing navigation...")
            wait_until, timeout = await service._get_navigation_strategy()
            await service._navigate_to_url(page, "http://example.com", wait_until, timeout)
            print("‚úÖ Navigation successful")
            
            # Test screenshot capture
            print("üìë Testing screenshot capture...")
            filepath = await service._capture_screenshot_with_retry(page, "/tmp/test.png", "png")
            print(f"‚úÖ Screenshot captured: {filepath}")
        
        print("‚úÖ Context manager test passed")
        
        # Test the simplified capture method
        print("\nüìë Testing simplified capture method...")
        
        # Mock the simplified capture method
        async def mock_capture_screenshot_with_context(url, width, height, format, filepath, start_time):
            """Mock implementation of the simplified capture method."""
            async with ContextManager(service, width, height) as (context, browser_index, page):
                # Get navigation strategy
                wait_until, page_timeout = await service._get_navigation_strategy()
                
                # Configure page and navigate to URL
                await service._configure_page_for_site(page)
                
                # Use conservative timeout strategy
                adaptive_timeout = int(page_timeout * 0.8)
                
                # Navigate to URL with simple error handling
                try:
                    await service._navigate_to_url(page, url, wait_until, adaptive_timeout)
                except Exception as nav_error:
                    print(f"Navigation failed, trying fallback: {nav_error}")
                    await service._navigate_to_url(page, url, "domcontentloaded", adaptive_timeout)
                
                # Capture the screenshot
                try:
                    filepath = await service._capture_screenshot_with_retry(page, filepath, format)
                except Exception as screenshot_error:
                    print(f"Screenshot failed, retrying: {screenshot_error}")
                    await asyncio.sleep(1)
                    filepath = await service._capture_screenshot_with_retry(page, filepath, format)
                
                return filepath
        
        # Test the mock implementation
        result = await mock_capture_screenshot_with_context(
            "http://example.com", 1280, 720, "png", "/tmp/test2.png", 0
        )
        print(f"‚úÖ Simplified capture method works: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_error_handling():
    """Test error handling in the simplified approach."""
    print("\nüß™ Testing Error Handling")
    print("=" * 50)
    
    service = MockScreenshotService()
    
    try:
        # Test exception handling in context manager
        print("üìë Testing exception handling...")
        try:
            async with ContextManager(service, 1280, 720) as (context, browser_index, page):
                print(f"‚úÖ Inside context: {type(context).__name__}")
                # Simulate an error
                raise ValueError("Test exception")
        except ValueError as e:
            print(f"‚úÖ Exception handled correctly: {e}")
        
        print("‚úÖ Error handling test passed")
        return True
        
    except Exception as e:
        print(f"‚ùå Error handling test failed: {e}")
        return False


async def main():
    """Run all tests."""
    print("üöÄ Starting Simplified Approach Tests")
    print("=" * 60)
    
    # Test simplified screenshot approach
    approach_test_passed = await test_simplified_screenshot_approach()
    
    # Test error handling
    error_test_passed = await test_error_handling()
    
    print("\n" + "=" * 60)
    print("üìã Test Results")
    print("=" * 60)
    print(f"Simplified approach: {'‚úÖ PASSED' if approach_test_passed else '‚ùå FAILED'}")
    print(f"Error handling: {'‚úÖ PASSED' if error_test_passed else '‚ùå FAILED'}")
    
    if approach_test_passed and error_test_passed:
        print("\nüéâ All tests passed!")
        print("\nüí° The simplified approach is working correctly:")
        print("   ‚úÖ No complex tab pool - simple and reliable")
        print("   ‚úÖ Uses traditional context-based approach")
        print("   ‚úÖ Conservative timeouts for better reliability")
        print("   ‚úÖ Simple retry logic without complex retry managers")
        print("   ‚úÖ Proper error handling and cleanup")
        print("   ‚úÖ Should eliminate the retry exhaustion errors")
        return 0
    else:
        print("\n‚ùå Some tests failed!")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)
